<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:nxui="org.nuxeo.ecm.flex.ui.*"   cornerRadius="20"
  verticalScrollPolicy="off" horizontalScrollPolicy="off" xmlns:ns1="*" backgroundColor="#FFFFFF">
  <mx:states>
    <mx:State name="defaultView">
      <mx:AddChild relativeTo="{canvas1}">
        <mx:Canvas creationComplete="updateDetails()" width="100%"  height="100%" >
          <mx:VBox width="100%"  height="100%" >
            <mx:HBox width="100%">
              <mx:VBox paddingLeft="10" paddingTop="10" horizontalAlign="left">
                <mx:Image id="icone" width="64" height="64" />
                <mx:Label id="docType" fontWeight="bold" width="100%"
                  textAlign="center" />
              </mx:VBox>
              <mx:Label id="docName" paddingTop="20" fontWeight="bold"
                width="100%" fontSize="48" textAlign="center" />
            </mx:HBox>
            <mx:DataGrid editable="true" itemEditEnd="addDirtyField(event);"
              id="propsgrid" width="100%" height="100%" rowCount="5">
              <mx:columns>
                <mx:DataGridColumn editable="false" dataField="schema"
                  headerText="SchemaName" />
                <mx:DataGridColumn editable="false" dataField="fieldName"
                  headerText="Field Name" />
                <mx:DataGridColumn editable="true" dataField="fieldValue"
                  headerText="Field Value" />
              </mx:columns>
            </mx:DataGrid>
            <mx:Box  paddingLeft="5" paddingBottom="5" >
             <mx:Button cornerRadius="15" label="save back document" click="save()" />
             </mx:Box>
          </mx:VBox>
        </mx:Canvas>
      </mx:AddChild>
    </mx:State>
  </mx:states>
  <mx:Script>
  <![CDATA[
    import org.nuxeo.ecm.flex.dto.FlexDocumentModel;		
    import mx.controls.Alert;
    import mx.rpc.events.ResultEvent;		
    import mx.rpc.events.FaultEvent;
    import mx.collections.ArrayCollection;
    import mx.events.DataGridEvent;
    import mx.core.Application;
    import mx.controls.TextInput;



    private var _currentFdm:FlexDocumentModel;			

    private var docPropsInGrid:ArrayCollection;	

    private var dirtyFields:ArrayCollection = new ArrayCollection();

    public function set currentFdm(value:FlexDocumentModel):void {
      _currentFdm = value;
      if (currentState == 'defaultView'){
        updateDetails();
      } else {
        currentState = 'defaultView';
      }
    }

    private function updateDetails():void{			
      if (_currentFdm.doctype != null){	
        var request:URLRequest = new URLRequest(_currentFdm.icon);
          var imageLoader:Loader = new Loader();
         imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadedImageHandler);
        imageLoader.load(request);	
      }
    }

    private function loadedImageHandler(event:Event):void{
        icone.source = Bitmap(event.currentTarget.content); 
        docName.text=_currentFdm.getTitle();  
        docType.text=_currentFdm.doctype;   
        fetchDetailFromDoc();
    }

    private function faultHandler(event:FaultEvent):void {
       Alert.show(event.fault.faultString, event.fault.faultCode.toString());
    }	

    private function fetchDetailFromDoc():void
    {
      var schemas:Array = _currentFdm.getSchemas();
      docPropsInGrid = new ArrayCollection();
      var i:int=0;
      var j:int=0;
      for (i=0;i<schemas.length;i++)
      {
        var fieldNames:Array = _currentFdm.getFieldNames(schemas[i]);
        for (j=0;j<fieldNames.length;j++)
        {
          var entry:Object= new Object();
          entry.schema=schemas[i];
          entry.fieldName=fieldNames[j];
          entry.fieldValue=_currentFdm.getProperty(schemas[i],fieldNames[j]);
          docPropsInGrid.addItem(entry);
        }
      }
      propsgrid.dataProvider = docPropsInGrid;
    }


          private function addDirtyField(event:DataGridEvent):void {
            var entry:Object= new Object();
            entry.schema = event.currentTarget.editedItemRenderer.data['schema'];
            entry.fieldName = event.currentTarget.editedItemRenderer.data['fieldName'];
            entry.fieldValue = TextInput(event.currentTarget.itemEditorInstance).text;
            trace(entry.fieldValue);
            dirtyFields.addItem(entry);				
          }

          private function save():void{
              var j:int=0;
              for (j=0;j<dirtyFields.length;j++) {
                  _currentFdm.setProperty(dirtyFields[j].schema,dirtyFields[j].fieldName,dirtyFields[j].fieldValue);
              }
              flexRepositoryService.saveDocument(_currentFdm);
         }

    private function saveDocumentHandler(event:ResultEvent):void{
      Application.application.fdm = _currentFdm;				
    }

  ]]>
  </mx:Script>
  <mx:RemoteObject id="flexRepositoryService"
    destination="flexRepositoryService" fault="faultHandler(event)">
    <mx:method name="saveDocument" result="saveDocumentHandler(event)" />
  </mx:RemoteObject>

  <mx:Resize id="resize" />

  <mx:VBox height="100%" width="100%" cornerRadius="20">
    <mx:Canvas resizeEffect="{resize}" height="100%" width="100%" id="canvas1" cornerRadius="20" />

  </mx:VBox>

</mx:Canvas>
