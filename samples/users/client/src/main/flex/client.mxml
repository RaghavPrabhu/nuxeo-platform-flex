<!--
  -->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:word="*" creationComplete="init()">

   <mx:Script>
		<![CDATA[
			import org.nuxeo.ecm.flex.dto.FlexDocumentModel;
			
                        import mx.controls.dataGridClasses.DataGridColumn;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;	

			[Bindable]
            		public var selectedUser:Object;

			[Bindable]
			public var foundUsers:Object;

			[Bindable]
			public var remainingGroups:ArrayCollection;

			[Bindable]
			public var allGroups:ArrayCollection;

			[Bindable]
			private var _callstack:Array

			private function faultHandler(event:FaultEvent):void {
				 Alert.show(event.fault.faultString, event.fault.faultCode.toString());
			}	
			
			private function searchUsers():void
			{
				flexUserManager.getUsers(userFilter.text);				
				//_callstack.splice(_callstack.length-1,0,"predicate");
			}	


			private function init():void
			{
				_callstack=new Array();
				flexUserManager.getGroups("");				
			}	

			private function getUsersHandler(event:ResultEvent):void
			{
				foundUsers = flexUserManager.getUsers.lastResult;
			}
			private function getGroupsHandler(event:ResultEvent):void
			{
				allGroups = flexUserManager.getGroups.lastResult;
			}
			private function getUserHandler(event:ResultEvent):void
			{
				selectedUser = flexUserManager.getUser.lastResult;
			}
			private function updateUserHandler(event:ResultEvent):void
			{
				updateMessage.text="user updated";
				flexUserManager.getUser(userLogin.text);
			}
			private function createUserHandler(event:ResultEvent):void
			{
				updateMessage.text="user created";
				flexUserManager.getUser(userLogin.text);
			}

			private function computeAvailableGroups():void
			{
				remainingGroups = new ArrayCollection();
 			        for(var i:int = 0; i < allGroups.length; i++) {
					var groupName:String = allGroups[i].name;
                                        var userGroups:ArrayCollection = ArrayCollection(selectedUser.groups);					
					if (!userGroups.contains(groupName))
					{
						remainingGroups.addItem(allGroups[i]);
						remainingGroups.itemUpdated(allGroups[i]);
					}
				}							
			}

			private function selectUser(user:Object):void
			{
				selectedUser=user;
				userFName.enabled=false;
				userLName.enabled=false;
				editUserBtn.visible=true;
				updateUserBtn.visible=false;
				editUser.visible=true;
				computeAvailableGroups();
			}

			private function addGroupToUser(groupName:String):void
			{
			        var userGroups:ArrayCollection = ArrayCollection(selectedUser.groups);					
				userGroups.addItem(groupName);
				userGroups.itemUpdated(groupName);
				computeAvailableGroups();
			}
			private function removeGroupFromUser(groupName:String):void
			{
				var idx:int=-1;
			        var userGroups:ArrayCollection = ArrayCollection(selectedUser.groups);					
				idx=userGroups.getItemIndex(groupName);
				if (idx>=0)
   				  userGroups.removeItemAt(idx);
				computeAvailableGroups();
				
			}

			private function editUserMode():void
			{
				formLabel.label="Selected User";
				editUserBtn.visible=false;
				updateUserBtn.visible=true;
				createUserBtn.visible=false;
				userFName.enabled=true;
				userLName.enabled=true;		
				grpButtons.visible=true;
				computeAvailableGroups();	
				passwordForm.visible=true;
			}
			private function createUserMode():void
			{
				userLogin.enabled=true;
				selectedUser = new Object();
				selectedUser.groups = new ArrayCollection();
				formLabel.label="Create User";
				editUserBtn.visible=false;
				updateUserBtn.visible=false;
				createUserBtn.visible=true;
				userFName.enabled=true;
				userLName.enabled=true;		
				grpButtons.visible=true;	
				computeAvailableGroups();
				passwordForm.visible=true;
			}

			private function updateUser():void
			{
				if (!checkPassword())
				  return;				

				userLogin.enabled=false;
				formLabel.label="Selected User";
				editUserBtn.visible=true;
				updateUserBtn.visible=false;
				userFName.enabled=false;
				userLName.enabled=false;			
				grpButtons.visible=false;
				
				var user:Object = new Object();
				user.name=userLogin.text;
				user.firstName=userFName.text;
				user.lastName=userLName.text;
				user.groups=ArrayCollection(selectedUser.groups);
				if (password.text!="")
				   user.password=password.text;

				flexUserManager.updateUser(user.name,user);
				passwordForm.visible=false;
			}

			private function checkPassword():Boolean
			{
				if (password.text!=passwordVerify.text)
				{
					Alert.show("Passwords do not match","error");
					return false;
				}
				return true;
			}

			private function createUser():void
			{

				if (!checkPassword())
				  return;		
				if (userLogin.text=="")
				{
					Alert.show("Login name can not be empty","error");
					return;
				}

				formLabel.label="Selected User";
				editUserBtn.visible=true;
				updateUserBtn.visible=false;
				createUserBtn.visible=false;
				userFName.enabled=false;
				userLName.enabled=false;			
				grpButtons.visible=false;
				
						

				var user:Object = new Object();
				user.name=userLogin.text;
				user.firstName=userFName.text;
				user.lastName=userLName.text;
				user.groups=ArrayCollection(selectedUser.groups);
				if (password.text!="")
				   user.password=password.text;
				flexUserManager.createUser(user);
				passwordForm.visible=false;
			}



	]]>
	</mx:Script>

    <mx:RemoteObject id="flexUserManager" destination="flexUserService" fault="faultHandler(event)" showBusyCursor="true">
	<mx:method name="getUsers" result="getUsersHandler(event)" />
	<mx:method name="getGroups" result="getGroupsHandler(event)" />
	<mx:method name="getUser" result="getUserHandler(event)" />
	<mx:method name="updateUser" result="updateUserHandler(event)" />
	<mx:method name="createUser" result="createUserHandler(event)" />
    </mx:RemoteObject>

    <mx:Panel
        title="Nuxeo-Flex AMF UserManager test"
        paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10">

	<mx:VBox width="100%">
        <mx:Button label="create new User" click="createUserMode()"/>
	<mx:HBox width="100%">
	<mx:TextInput id="userFilter" width="200"/>
        <mx:Button label="search Users" click="searchUsers()"/>
	</mx:HBox>				
        <mx:Label text="found users"/>
	<mx:List id="userList" width="100%" color="blue"
            dataProvider="{foundUsers}"
	    change="selectUser(List(event.target).selectedItem)"/>
	</mx:VBox>	

	 <mx:VBox width="100%">
			<mx:Form width="100%" backgroundColor="#ffffff" borderStyle="solid" height="100%" id="editUser" visible="false">
				<mx:FormHeading id="formLabel" label="Selected User" />
				<mx:FormItem label="Login :" width="100%">
					 <mx:TextInput id="userLogin" width="200" text="{selectedUser.name}" enabled="false"/>
				</mx:FormItem>
				<mx:FormItem label="First Name:" width="100%">
					 <mx:TextInput id="userFName" width="200" text="{selectedUser.firstName}"/>
				</mx:FormItem>
				<mx:FormItem label="Last Name:" width="100%">
					 <mx:TextInput id="userLName" width="200" text="{selectedUser.lastName}"/>
				</mx:FormItem>
				<mx:FormItem label="User groups:" width="100%">
				 <mx:HBox width="100%">
				    <mx:VBox width="45%">
   				    <mx:Label text="user's groups"/>
			   	    <mx:List id="userGroupsList" width="100%" color="blue"
            				dataProvider="{selectedUser.groups}"/>
				    </mx:VBox>	
                                    <mx:VBox id="grpButtons" width="10%" paddingTop="80" visible="false">
				        <mx:Button id="removeGroup" label="remove" click="removeGroupFromUser(userGroupsList.selectedItem.toString())"/>
				        <mx:Button id="addGroup" label="add" click="addGroupToUser(allGroupsList.selectedItem.data)"/>
				    </mx:VBox>	
				    <mx:VBox width="45%">
   				    <mx:Label text="available groups"/>
			   	    <mx:List id="allGroupsList" width="100%" color="blue" dataProvider="{remainingGroups}"/>
				    </mx:VBox>	

                                 </mx:HBox>
				</mx:FormItem>		
                                <mx:FormItem label="Change / Set password" width="100%" id="passwordForm" visible="false">
				 <mx:HBox width="100%">
				    <mx:VBox width="50%">
					 <mx:Label text="password"/>
					 <mx:TextInput id="password" width="200" text="" displayAsPassword="true"/>
				    </mx:VBox>
				    <mx:VBox width="50%">
					 <mx:Label text="verify"/>
					 <mx:TextInput id="passwordVerify" width="200" text="" displayAsPassword="true"/>
				    </mx:VBox>
                                 </mx:HBox>
				</mx:FormItem>		
				<mx:Label id="updateMessage" text=""/>
				 <mx:HBox width="100%">
			        <mx:Button id="editUserBtn" label="edit" click="editUserMode()"/>
			        <mx:Button id="updateUserBtn" label="update" click="updateUser()" visible="false"/>
			        <mx:Button id="createUserBtn" label="create" click="createUser()" visible="false"/>
				 </mx:HBox>
		</mx:Form>

        </mx:VBox>

        <mx:HRule width="100%" strokeWidth="1" strokeColor="white"/>
	

</mx:Panel>

</mx:Application>
