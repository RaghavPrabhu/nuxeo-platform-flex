<!--
/*
 * (C) Copyright 2006-2011 Nuxeo SAS (http://nuxeo.com/) and contributors.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * Contributors:
 *     Nuxeo - initial API and implementation
 */
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:word="*" creationComplete="init()">

 <mx:Script>
    <![CDATA[
      import org.nuxeo.ecm.flex.dto.FlexDocumentModel;
      import mx.collections.ArrayCollection;
      import mx.controls.Alert;
      import mx.controls.Tree;
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;
      import mx.utils.ObjectProxy;
      import mx.events.TreeEvent;
      import flash.events.Event;

      [Bindable]
      public var docTreeList:ArrayCollection;

      [Bindable]
      private var currentDocument:ObjectProxy

      private var _treeNodeToOpen:Object;

      private function init():void
      {
        docTreeList= new ArrayCollection();
        documentManager.getDocument("pathRef:/default-domain");
      }

      private function getActionsCallback(event:ResultEvent):void
      {
        var actions:ArrayCollection = actionManager.getActionsList.lastResult;
      }

      private function getDocumentCallback(event:ResultEvent):void
      {
        var doc:FlexDocumentModel = documentManager.getDocument.lastResult;
        var obj:ObjectProxy = new ObjectProxy();
        obj["type"] = "doc";
        obj["children"] = new ArrayCollection();
        obj["fetch"] = false;
        obj["name"]=doc.getTitle();
        obj["docId"]=doc.id;
        obj["label"]=doc.getTitle();
        docTreeList.addItem(obj);
        docTreeList.itemUpdated(obj);
      }

      private function getChildrenCallback(event:ResultEvent):void
      {
          var children:ArrayCollection = documentManager.getChildren.lastResult;
          var obj:ObjectProxy;
          for(var i:int = 0; i < children.length; i++) {
               obj= new ObjectProxy();
               obj["type"] = "doc";
               if (children[i].isFolder())
               {
                   obj["children"] = new ArrayCollection();
               }
               obj["label"]=children[i].getTitle();
               obj["fetch"] = false;
               obj["name"]=children[i].getTitle();
               obj["docId"]=children[i].id;
               _treeNodeToOpen.children.addItem(obj);
          }
          _treeNodeToOpen.fetch = true;
          docTreeList.itemUpdated(_treeNodeToOpen);
      }

      private function faultHandler(event:FaultEvent):void {
         Alert.show(event.fault.faultString, event.fault.faultCode.toString());
      }

      private function setView(event:TreeEvent):void {
          if(event.item.type == "doc" && event.item.fetch == false) {
            var item:Object = event.item;
            var docId:String = item["docId"];
            _treeNodeToOpen=item;
            documentManager.getChildren("idRef:"+docId);
          }
      }

      private function selectContainer(event:Event):void {
        var docId:String = event.currentTarget.selectedItem.docId;

        // update currentDocument (even if it's a fake)
        currentDocument = event.currentTarget.selectedItem;

        // define categories we are interested in
        var categories:ArrayCollection=new ArrayCollection();
        categories.addItem("FLEX_ACTIONS_ON_CONTAINER");
        categories.addItem("FLEX_TABS");

        // call action service to fetch actions associated to the categories in the context of the given document
        actionManager.getActionsList(categories,docId);
      }

  ]]>
 </mx:Script>

  <mx:RemoteObject id="documentManager" destination="flexDocumentManager" fault="faultHandler(event)">
    <mx:method name="getDocument" result="getDocumentCallback(event)" />
    <mx:method name="getChildren" result="getChildrenCallback(event)" />
  </mx:RemoteObject>

  <mx:RemoteObject id="actionManager" destination="flexActionService" fault="faultHandler(event)">
    <mx:method name="getActionsList" result="getActionsCallback(event)" />
  </mx:RemoteObject>

 <mx:Panel
        title="Actions Service sample"
        paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" width="600">


  <mx:Label text='This screen allows to see a demo of the Action Service.'/>
  <mx:Label text='Select a document in the tree,'/>
  <mx:Label text='the list below will display the associated actions.'/>

  <mx:Tree id="docTree" width="100%" height="78%"
      dataProvider="{docTreeList}"
      itemOpen="setView(event)"
      change="selectContainer(event)"/>

   <mx:Label text='Actions for document {currentDocument.label} ( {currentDocument.docId} ) .'/>
   <mx:DataGrid id="actionsGrid" width="100%" height="100%" rowCount="5" dataProvider="{actionManager.getActionsList.lastResult}">
            <mx:columns>
                <mx:DataGridColumn dataField="categories" headerText="Category"/>
                <mx:DataGridColumn dataField="label" headerText="Label"/>
            </mx:columns>
   </mx:DataGrid>

 </mx:Panel>

</mx:Application>
