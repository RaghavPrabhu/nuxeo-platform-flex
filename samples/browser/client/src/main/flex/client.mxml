<!--
  -->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:word="*" creationComplete="init()">

   <mx:Script>
    <![CDATA[
      import org.nuxeo.ecm.flex.dto.FlexDocumentModel;
      import mx.collections.ArrayCollection;
      import mx.controls.dataGridClasses.DataGridColumn;
      import mx.controls.Alert;
      import mx.controls.Tree;
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;
      import mx.utils.ObjectProxy;
      import mx.events.TreeEvent;
      import mx.events.ListEvent;

      [Bindable]
      public var docTreeList:ArrayCollection;

      [Bindable]
      public var currentFolderChildren:ArrayCollection;

      [Bindable]
      public var currentDocument:FlexDocumentModel;

      [Bindable]
      public var currentDocumentProperties:ArrayCollection;

      private var _getDocumentCallstack:Array;
      private var _getChildrenCallstack:Array;
      private var _treeNodeToOpen:Object;

      private const INIT_CALLTYPE:String = "init";
      private const TREE_CALLTYPE:String = "tree";
      private const DETAILS_CALLTYPE:String = "details";

      private function init():void
      {
        docTreeList= new ArrayCollection();
        _getDocumentCallstack = new Array();
        _getChildrenCallstack = new Array();
        _getDocumentCallstack.splice(_getDocumentCallstack.length-1,0,INIT_CALLTYPE);
        flexDocumentManager.getDocument("pathRef:/default-domain");
      }

      private function getDocumentCallback(event:ResultEvent):void
      {
        var doc:FlexDocumentModel = flexDocumentManager.getDocument.lastResult;
        var calltype:String = _getDocumentCallstack.pop();
        if (calltype==INIT_CALLTYPE)
        {
              var obj:ObjectProxy = new ObjectProxy();
              obj["type"] = "doc";
              obj["children"] = new ArrayCollection();
              obj["fetch"] = false;
              obj["name"]=doc.getTitle();
              obj["docId"]=doc.id;
              obj["label"]=doc.getTitle();
              docTreeList.addItem(obj);
              docTreeList.itemUpdated(obj);
        }
        else
        {
              fetchDetailFromDoc(doc);
        }
      }

      private function getChildrenCallback(event:ResultEvent):void
      {
        var children:ArrayCollection = flexDocumentManager.getChildren.lastResult;
        var calltype:String = _getChildrenCallstack.pop();
        if (calltype==TREE_CALLTYPE)
        {
          var obj:ObjectProxy;
          for(var i:int = 0; i < children.length; i++) {
              if (children[i].isFolder())
              {
                  obj= new ObjectProxy();
                  obj["type"] = "doc";
                  obj["children"] = new ArrayCollection();
                  obj["label"]=children[i].getTitle();
                  obj["fetch"] = false;
                  obj["name"]=children[i].getTitle();
                  obj["docId"]=children[i].id;
                  _treeNodeToOpen.children.addItem(obj);
              }
          }
          _treeNodeToOpen.fetch = true;
          docTreeList.itemUpdated(_treeNodeToOpen);
        }
        else
        {
          currentFolderChildren=children;
        }
      }

      private function faultHandler(event:FaultEvent):void {
         Alert.show(event.fault.faultString, event.fault.faultCode.toString());
      }

      private function nodeOpenHandler(event:TreeEvent):void {
         if(event.item.type == "doc" && event.item.fetch == false) {
            var item:Object = event.item;
            var docId:String = item["docId"];
            _treeNodeToOpen=item;
            _getChildrenCallstack.splice(_getChildrenCallstack.length-1,0,TREE_CALLTYPE);
            flexDocumentManager.getChildren("idRef:"+docId);
          }
      }

      private function setCurrentFolder(event:Event):void {
         var docId:String = event.currentTarget.selectedItem.docId;
         _getChildrenCallstack.splice(_getChildrenCallstack.length-1,0,"grid");
         flexDocumentManager.getChildren("idRef:"+docId);
      }

      private function displayTitle( row:Object, column:DataGridColumn ):String {
         return row.getTitle();
      }

      private function displayCreator( row:Object, column:DataGridColumn ):String {
         return row.getProperty("dublincore","creator");
      }

      private function displayModified( row:Object, column:DataGridColumn ):String {
         return row.getProperty("dublincore","modified");
      }

      private function setCurrentDocument(event:ListEvent):void {
        var docId:String = event.target.selectedItem.id;
        _getDocumentCallstack.splice(_getDocumentCallstack.length-1,0,DETAILS_CALLTYPE);
        flexDocumentManager.getDocument("idRef:"+docId);
      }

      private function fetchDetailFromDoc(doc:FlexDocumentModel):void
      {
        currentDocument = doc;
        var schemas:Array = doc.getSchemas();
        currentDocumentProperties = new ArrayCollection();
        var i:int=0;
        var j:int=0;
        for (i=0;i<schemas.length;i++)
        {
          var fieldNames:Array = doc.getFieldNames(schemas[i]);
          for (j=0;j<fieldNames.length;j++)
          {
            var entry:Object= new Object();
            entry.schema=schemas[i];
            entry.fieldName=fieldNames[j];
            entry.fieldValue=doc.getProperty(schemas[i],fieldNames[j]);
            currentDocumentProperties.addItem(entry);
          }
        }
      }

  ]]>
  </mx:Script>

 <mx:RemoteObject id="flexDocumentManager" destination="flexDocumentManager" fault="faultHandler(event)">
  <mx:method name="getDocument" result="getDocumentCallback(event)" />
  <mx:method name="getChildren" result="getChildrenCallback(event)" />
 </mx:RemoteObject>

 <mx:Panel
        title="Nuxeo explorer"
        paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10">

  <mx:HBox>
   <mx:Tree id="docTree" width="40%" height="100%"
      dataProvider="{docTreeList}"
      itemOpen="nodeOpenHandler(event)"
      change="setCurrentFolder(event)"/>

   <mx:DataGrid id="dg" width="100%" height="100%" rowCount="5" dataProvider="{currentFolderChildren}" itemClick="setCurrentDocument(event)">
            <mx:columns>
                <mx:DataGridColumn dataField="doctype"  headerText="Doc type"/>
                <mx:DataGridColumn dataField="contentdata.dublincore.title" labelFunction="displayTitle" headerText="Title"/>
                <mx:DataGridColumn dataField="contentdata.dublincore.title" labelFunction="displayModified" headerText="Modified"/>
                <mx:DataGridColumn dataField="contentdata.dublincore.creator" labelFunction="displayCreator" headerText="Creator"/>
            </mx:columns>
   </mx:DataGrid>
  </mx:HBox>

  <mx:Label text='current Selected document :uuid "{currentDocument.uid}" title : "{currentDocument.getTitle()}"'/>

  <mx:DataGrid id="propsgrid" width="100%" height="100%" rowCount="5" dataProvider="{currentDocumentProperties}">
            <mx:columns>
                <mx:DataGridColumn dataField="schema"  headerText="SchemaName"/>
                <mx:DataGridColumn dataField="fieldName" headerText="Field Name"/>
                <mx:DataGridColumn dataField="fieldValue" headerText="Field Value"/>
            </mx:columns>
  </mx:DataGrid>

</mx:Panel>

</mx:Application>
