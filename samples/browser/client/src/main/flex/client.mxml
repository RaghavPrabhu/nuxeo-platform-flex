<!--
  -->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:word="*" creationComplete="init()">

   <mx:Script>
		<![CDATA[
			import org.nuxeo.ecm.flex.dto.FlexDocumentModel;			
			import mx.collections.ArrayCollection;
                        import mx.controls.dataGridClasses.DataGridColumn;
			import mx.controls.Alert;
			import mx.controls.Tree;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;	
			import mx.utils.ObjectProxy;
   	                import mx.events.TreeEvent;
			import mx.events.ListEvent;

			[Bindable]
			public var itemToOpen:Object;

			[Bindable]
			public var docTreeList:ArrayCollection;

			[Bindable]
			public var docChidrenInGrid:ArrayCollection;

			[Bindable]
			public var docPropsInGrid:ArrayCollection;

			private var _callstack:Array
			private var _callstack2:Array

			private function init():void
			{
				docTreeList= new ArrayCollection();
				_callstack = new Array();
				_callstack2 = new Array();
				_callstack2.splice(_callstack2.length-1,0,"init");
				flexDocumentManager.getDocument("/default-domain");
			}

	
			private function getDocumentHandler(event:ResultEvent):void
			{
				var doc:FlexDocumentModel = flexDocumentManager.getDocument.lastResult;
				var calltype:String = _callstack2.pop();
				if (calltype=="init")
				{
               		        var obj:ObjectProxy = new ObjectProxy();
				obj["type"] = "doc";
				obj["children"] = new ArrayCollection();
				obj["fetch"] = false;
				obj["name"]=doc.getTitle();		
				obj["docId"]=doc.id;
				obj["label"]=doc.getTitle();		
				docTreeList.addItem(obj);
	                        docTreeList.itemUpdated(obj);
				}
				else
				{
					fetchDetailFromDoc(doc);
				}
			}

			private function getChildrenHandler(event:ResultEvent):void
			{
				var children:ArrayCollection = flexDocumentManager.getChildren.lastResult;
				var calltype:String = _callstack.pop();
				if (calltype=="tree")
				{
               		          var obj:ObjectProxy;
			          for(var i:int = 0; i < children.length; i++) {
			                obj= new ObjectProxy();
			                obj["type"] = "doc";
					if (children[i].isFolder())
					{						
				                obj["children"] = new ArrayCollection();
					}
					obj["label"]=children[i].getTitle();			
			                obj["fetch"] = false;
					obj["name"]=children[i].getTitle();			

					obj["docId"]=children[i].id;
			                _itemToOpen.fetch = true;
			                _itemToOpen.children.addItem(obj);
			                    docTreeList.itemUpdated(_itemToOpen);
		               	   }
				}
				else
				{
					docChidrenInGrid=children;
				}
			}

			private function faultHandler(event:FaultEvent):void {
				 Alert.show(event.fault.faultString, event.fault.faultCode.toString());
			}	
		
			private var _itemToOpen:Object;

			private function setView(event:TreeEvent):void {
               			if(event.item.type == "doc" && event.item.fetch == false) {				   
				   var item:Object = event.item;
				   var docId:String = item["docId"];       				
				   _itemToOpen=item;
				    _callstack.splice(_callstack.length-1,0,"tree");
				   flexDocumentManager.getChildren(docId);
		               }
           		}	

			private function selectContainer(event:Event):void {
				var docId:String = event.currentTarget.selectedItem.docId;					
				_callstack.splice(_callstack.length-1,0,"grid");	
  			        flexDocumentManager.getChildren(docId);					
           		}	

			private function displayTitle( row:Object, column:DataGridColumn ):String {
			         return row.getTitle();
		        }
                        private function displayCreator( row:Object, column:DataGridColumn ):String {
			         return row.getProperty("dublincore","creator");
		        }	
                        private function displayModified( row:Object, column:DataGridColumn ):String {
			         return row.getProperty("dublincore","modified");
		        }

			private function selectDoc(event:ListEvent):void {
				var docId:String = event.target.selectedItem.id;					
				_callstack2.splice(_callstack2.length-1,0,"details");
				flexDocumentManager.getDocument(docId);								
           		}		
			
			private function fetchDetailFromDoc(doc:FlexDocumentModel):void
			{
				var schemas:Array = doc.getSchemas();
				docPropsInGrid = new ArrayCollection();
				var i:int=0;
				var j:int=0;
				for (i=0;i<schemas.length;i++)
				{
					var fieldNames:Array = doc.getFieldNames(schemas[i]);
					for (j=0;j<fieldNames.length;j++)
					{
						var entry:Object= new Object();
						entry.schema=schemas[i];
						entry.fieldName=fieldNames[j];
						entry.fieldValue=doc.getProperty(schemas[i],fieldNames[j]);
						docPropsInGrid.addItem(entry);
					}
				}
			}
		
	]]>
	</mx:Script>

    <mx:RemoteObject id="flexDocumentManager" destination="flexRepositoryService" fault="faultHandler(event)">
      <mx:method name="getDocument" result="getDocumentHandler(event)" />
      <mx:method name="getChildren" result="getChildrenHandler(event)" />
    </mx:RemoteObject>

    <mx:Panel
        title="Nuxeo explorer"
        paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10">

 <mx:HBox>
	<mx:Tree id="docTree" width="40%" height="100%"
	dataProvider="{docTreeList}" 
	itemOpen="setView(event)" change="selectContainer(event)"/>

	<mx:DataGrid id="dg" width="100%" height="100%" rowCount="5" dataProvider="{docChidrenInGrid}" itemClick="selectDoc(event)">
            <mx:columns>
                <mx:DataGridColumn dataField="doctype"  headerText="Doc type"/>
                <mx:DataGridColumn dataField="contentdata.dublincore.title" labelFunction="displayTitle" headerText="Title"/>
                <mx:DataGridColumn dataField="contentdata.dublincore.title" labelFunction="displayModified" headerText="Modified"/>
                <mx:DataGridColumn dataField="contentdata.dublincore.creator" labelFunction="displayCreator" headerText="Creator"/>
            </mx:columns>
        </mx:DataGrid>
 </mx:HBox>

	<mx:DataGrid id="propsgrid" width="100%" height="100%" rowCount="5" dataProvider="{docPropsInGrid}">
            <mx:columns>
                <mx:DataGridColumn dataField="schema"  headerText="SchemaName"/>
                <mx:DataGridColumn dataField="fieldName" headerText="Field Name"/>
                <mx:DataGridColumn dataField="fieldValue" headerText="Field Value"/>
            </mx:columns>
        </mx:DataGrid>

     </mx:Panel>

</mx:Application>
