<!--
/*
 * (C) Copyright 2006-2011 Nuxeo SAS (http://nuxeo.com/) and contributors.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * Contributors:
 *     Nuxeo - initial API and implementation
 */
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:word="*" creationComplete="init()">

   <mx:Script>
    <![CDATA[
      import org.nuxeo.ecm.flex.dto.FlexDocumentModel;
      import mx.controls.dataGridClasses.DataGridColumn;
      import mx.controls.Alert;
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;

      [Bindable]
      public var selectedPredicate:Object;

      [Bindable]
      public var selectedTopic:Object;

      [Bindable]
      public var selectedSubTopic:Object;

      [Bindable]
      public var topics:Object;

      [Bindable]
      public var subtopics:Object;

      [Bindable]
      public var predicates:Object;

      [Bindable]
      private var _callstack:Array

      private function faultHandler(event:FaultEvent):void {
         Alert.show(event.fault.faultString, event.fault.faultCode.toString());
      }

      private function fetchPredicatesVoc():void
      {
        flexVocManager.getVocabularyEntries("predicates");
        _callstack.splice(_callstack.length-1,0,"predicate");
      }

      private function fetchTopicsVoc():void
      {
        flexVocManager.getVocabularyEntries("topic");
        _callstack.splice(_callstack.length-1,0,"topic");
      }

      private function fetchSubTopicsVoc(topicKey:String):void
      {
        flexVocManager.getVocabularyEntries("subtopic",topicKey);
        _callstack.splice(_callstack.length-1,0,"subtopic");
      }

      private function init():void
      {
        _callstack=new Array();
        fetchPredicatesVoc();
        fetchTopicsVoc();
      }
      private function getVocabularyEntriesHandler(event:ResultEvent):void
      {
        var calltype:String = _callstack.pop();
        if (calltype=="topic")
          topics = flexVocManager.getVocabularyEntries.lastResult
        else if (calltype=="predicate")
          predicates = flexVocManager.getVocabularyEntries.lastResult
        else if (calltype=="subtopic")
          subtopics = flexVocManager.getVocabularyEntries.lastResult
      }

      private function selectTopic(topicItem:Object):void
      {
        this.selectedTopic=topicItem;
        var topicKey:String = selectedTopic.data as String;
        fetchSubTopicsVoc(topicKey);

      }
  ]]>
  </mx:Script>

  <mx:RemoteObject id="flexVocManager" destination="flexVocabularyService" fault="faultHandler(event)" showBusyCursor="true">
     <mx:method name="getVocabularyEntries" result="getVocabularyEntriesHandler(event)" />
  </mx:RemoteObject>

  <mx:Panel
        title="Vocabulary sample"
        paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" width="600">

        <mx:Button label="Fetch simple vocabulary" click="fetchPredicatesVoc()"/>
        <mx:List id="predicateList" width="100%" color="blue"
            dataProvider="{predicates}"
            change="this.selectedPredicate=List(event.target).selectedItem"/>

        <mx:VBox width="100%">
            <mx:Label text="Selected Entry: {selectedPredicate.label} ({selectedPredicate.data} )"/>
        </mx:VBox>

        <mx:HRule width="100%" strokeWidth="1" strokeColor="white"/>

        <mx:Button label="Fetch hierachical vocabulary" click="fetchTopicsVoc()"/>

        <mx:HBox width="100%">
        <mx:List id="topicList" width="100%" color="blue"
            dataProvider="{topics}"
            change="selectTopic(List(event.target).selectedItem)"/>
        <mx:List id="subTopicList" width="100%" color="blue"
            dataProvider="{subtopics}"
            change="this.selectedSubTopic=List(event.target).selectedItem"/>
        </mx:HBox>
        <mx:VBox width="100%">
            <mx:Label text="Selected Topic: {selectedTopic.label}/{selectedSubTopic.label} ({selectedTopic.data}/{selectedSubTopic.data})"/>
        </mx:VBox>

</mx:Panel>

</mx:Application>
